{"version":3,"sources":["store/topics/actionTypes.js","store/topics/reducer.js","services/reddit.js","components/ListView.js","components/ListRow.js","containers/TopicsScreen.js","store/topics/actions.js","store/posts/actionTypes.js","store/posts/reducer.js","components/TopicFilter.js","components/PostView.js","containers/PostsScreen.js","store/posts/actions.js","App.js","index.js"],"names":["TOPICS_FETCHED","TOPICS_SELECTED","TOPIC_SELECTION_FINALIZED","initialState","Immutable","topicsByUrl","undefined","selectedTopicUrls","selectionFinalized","reduce","state","action","type","types","merge","getSelectedTopicUrls","topics","getSelectedTopicsByUrl","_","mapValues","keyBy","topicUrl","isTopicSelectionValid","length","isTopicSelectionFinalized","REDDIT_ENDPOINT","url","fetch","method","headers","Accept","response","ok","Error","status","json","data","children","get","map","subreddit","title","description","subredditUrl","post","body","id","thumbnail","_validateUrl","startsWith","ListView","this","props","rowsIdArray","renderRowById","bind","rowId","renderRow","rowsById","Component","ListRow","backgroundColor","selected","style","onClick","TopicsScreen","dispatch","getState","a","redditService","getDefaultSubreddits","subredditArray","console","error","className","canFinalizeSelection","onNextScreenClick","renderLoading","row","selectedRowsById","onRowClick","selectedTopics","topicsSelectors","indexOf","newSelectedTopics","concat","slice","connect","keys","POSTS_FETCHED","FILTER_CHANGED","POST_SELECTED","postsById","currentFilter","currentPostId","filter","postId","getCurrentFilter","posts","getCurrentPost","TopicFilter","renderFilter","topic","topicId","label","href","onFilterClick","onChanged","PostView","renderBody","_isImage","renderImage","renderUrl","renderEmpty","dangerouslySetInnerHTML","_getBodyMarkup","src","alt","target","__html","replace","match","dec","String","fromCharCode","endsWith","PostsScreen","fetchPromises","getPostsFromSubreddit","Promise","all","topicPosts","shuffle","flatten","onFilterChanged","currentPost","newFilter","postsActions","postsIdArray","postsSelectors","App","isSelectionFinalized","store","createStore","combineReducers","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.139e10c9.chunk.js","sourcesContent":["// strings should be unique across reducers so namespace them with the reducer name\n\nexport const TOPICS_FETCHED = 'topics.TOPICS_FETCHED';\nexport const TOPICS_SELECTED = 'topics.TOPICS_SELECTED';\nexport const TOPIC_SELECTION_FINALIZED = 'topics.TOPIC_SELECTION_FINALIZED';","// reducers hold the store's state (the initialState object defines it)\n// reducers also handle plain object actions and modify their state (immutably) accordingly\n// this is the only way to change the store's state\n// the other exports in this file are selectors, which is business logic that digests parts of the store's state\n// for easier consumption by views\n\nimport _ from 'lodash';\nimport * as types from './actionTypes';\nimport Immutable from 'seamless-immutable';\n\nconst initialState = Immutable({\n    topicsByUrl: undefined,\n    selectedTopicUrls: [],\n    selectionFinalized: false\n});\n\nexport default function reduce(state = initialState, action = {}) {\n    switch (action.type) {\n        case types.TOPICS_FETCHED:\n            return state.merge({\n                topicsByUrl: action.topicsByUrl\n            });\n        case types.TOPICS_SELECTED:\n            return state.merge({\n                selectedTopicUrls: action.selectedTopicUrls\n            });\n        case types.TOPIC_SELECTION_FINALIZED:\n            return state.merge({\n                selectionFinalized: true\n            });\n        default:\n            return state;\n    }\n}\n\n// selectors\n\nexport function getTopics(state) {\n    const topicsByUrl = state.topics.topicsByUrl;\n    const topicsUrlArray = _.keys(topicsByUrl);\n    return [topicsByUrl, topicsUrlArray];\n}\n\nexport function getSelectedTopicUrls(state) {\n    return state.topics.selectedTopicUrls;\n}\n\nexport function getSelectedTopicsByUrl(state) {\n    return _.mapValues(_.keyBy(state.topics.selectedTopicUrls), (topicUrl) => state.topics.topicsByUrl[topicUrl]);\n}\n\nexport function isTopicSelectionValid(state) {\n    return state.topics.selectedTopicUrls.length === 3;\n}\n\nexport function isTopicSelectionFinalized(state) {\n    return state.topics.selectionFinalized;\n}","// services are state-less\n// they act as utility facades that abstract the details for complex operations\n// normally, our interface to any sort of server API will be as a service\n\nimport _ from 'lodash';\n\nconst REDDIT_ENDPOINT = 'https://www.reddit.com';\n\nclass RedditService {\n\n    async getDefaultSubreddits() {\n        const url = `${REDDIT_ENDPOINT}/subreddits/default.json`;\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`RedditService getDefaultSubreddits failed, HTTP status ${response.status}`);\n        }\n        const data = await response.json();\n        const children = _.get(data, 'data.children');\n        if (!children) {\n            throw new Error(`RedditService getDefaultSubreddits failed, children not returned`);\n        }\n        return _.map(children, (subreddit) => {\n            // abstract away the specifics of the reddit API response and take only the fields we care about\n            return {\n                title: _.get(subreddit, 'data.display_name'),\n                description: _.get(subreddit, 'data.public_description'),\n                url: _.get(subreddit, 'data.url')\n            }\n        });\n    }\n\n    async getPostsFromSubreddit(subredditUrl) {\n        const url = `${REDDIT_ENDPOINT}${subredditUrl}hot.json`;\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`RedditService getPostsFromSubreddit failed, HTTP status ${response.status}`);\n        }\n        const data = await response.json();\n        const children = _.get(data, 'data.children');\n        if (!children) {\n            throw new Error(`RedditService getPostsFromSubreddit failed, children not returned`);\n        }\n        return _.map(children, (post) => {\n            // abstract away the specifics of the reddit API response and take only the fields we care about\n            const body = _.get(post, 'data.selftext_html');\n            return {\n                id: _.get(post, 'data.id'),\n                title: _.get(post, 'data.title'),\n                topicUrl: subredditUrl,\n                body: body,\n                thumbnail: this._validateUrl(_.get(post, 'data.thumbnail')),\n                url: !body ? this._validateUrl(_.get(post, 'data.url')) : undefined\n            }\n        });\n    }\n\n    _validateUrl(url = '') {\n        return url.startsWith('http') ? url : undefined;\n    }\n\n}\n\nexport default new RedditService();","import _ from 'lodash';\nimport React, { Component } from 'react';\n\nexport default class ListView extends Component {\n\n    render() {\n        return (\n            <ul>\n                {_.map(this.props.rowsIdArray, this.renderRowById.bind(this))}\n            </ul>\n        );\n    }\n\n    renderRowById(rowId) {\n        return (\n            <li key={rowId}>\n                {this.props.renderRow(rowId, _.get(this.props.rowsById, rowId))}\n            </li>\n        );\n    }\n\n}","import React, { Component } from 'react';\n\nexport default class ListRow extends Component {\n\n    render() {\n        const backgroundColor = this.props.selected ? '#c0f0ff' : '#fff';\n        return (\n            <div\n                style={{ backgroundColor }}\n                onClick={this.onClick.bind(this)}>\n                {this.props.children}\n            </div>\n        );\n    }\n\n    onClick() {\n        this.props.onClick(this.props.rowId);\n    }\n\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './TopicsScreen.css';\nimport * as topicsActions from '../store/topics/actions';\nimport * as topicsSelectors from '../store/topics/reducer';\nimport ListView from '../components/ListView';\nimport ListRow from '../components/ListRow';\n\nclass TopicsScreen extends Component {\n\n    componentDidMount() {\n        this.props.dispatch(topicsActions.fetchTopics());\n    }\n\n    render() {\n        if (!this.props.rowsById) return this.renderLoading();\n        return (\n            <div className=\"TopicsScreen\">\n                <ListView\n                    rowsIdArray={this.props.rowsIdArray}\n                    rowsById={this.props.rowsById}\n                    renderRow={this.renderRow.bind(this)} />\n                {!this.props.canFinalizeSelection ? false :\n                    <button className=\"NextScreen\" onClick={this.onNextScreenClick.bind(this)} />\n                }\n            </div>\n        );\n    }\n\n    renderLoading() {\n        return (\n            <p>Loading...</p>\n        );\n    }\n\n    renderRow(rowId, row) {\n        const selected = this.props.selectedRowsById[rowId];\n        return (\n            <ListRow\n                rowId={rowId}\n                onClick={this.onRowClick.bind(this)}\n                selected={selected}>\n                <h3>{row.title}</h3>\n                <p>{row.description}</p>\n            </ListRow>\n        )\n    }\n\n    onRowClick(rowId) {\n        this.props.dispatch(topicsActions.selectTopic(rowId));\n    }\n\n    onNextScreenClick() {\n        this.props.dispatch(topicsActions.finalizeTopicSelection());\n    }\n\n}\n\n// which props do we want to inject, given the global store state?\nfunction mapStateToProps(state) {\n    const [topicsByUrl, topicsUrlArray] = topicsSelectors.getTopics(state);\n    return {\n        rowsById: topicsByUrl,\n        rowsIdArray: topicsUrlArray,\n        selectedRowsById: topicsSelectors.getSelectedTopicsByUrl(state),\n        canFinalizeSelection: topicsSelectors.isTopicSelectionValid(state)\n    };\n}\n\nexport default connect(mapStateToProps)(TopicsScreen);","import _ from 'lodash';\nimport * as types from './actionTypes';\nimport redditService from '../../services/reddit';\nimport * as topicsSelectors from './reducer';\n\nexport function fetchTopics() {\n    return async(dispatch, getState) => {\n        try {\n            const subredditArray = await redditService.getDefaultSubreddits();\n            const topicsByUrl = _.keyBy(subredditArray, (subreddit) => subreddit.url);\n            dispatch({ type: types.TOPICS_FETCHED, topicsByUrl });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n}\n\nexport function selectTopic(topicUrl) {\n    return (dispatch, getState) => {\n        const selectedTopics = topicsSelectors.getSelectedTopicUrls(getState());\n        if (_.indexOf(selectedTopics, topicUrl) !== -1) return;\n        const newSelectedTopics = selectedTopics.length < 3 ?\n            selectedTopics.concat(topicUrl) :\n            selectedTopics.slice(1).concat(topicUrl);\n        dispatch({ type: types.TOPICS_SELECTED, selectedTopicUrls: newSelectedTopics  });\n    };\n}\n\nexport function finalizeTopicSelection() {\n    return({ type: types.TOPIC_SELECTION_FINALIZED });\n}","// strings should be unique across reducers so namespace them with the reducer name\n\nexport const POSTS_FETCHED = 'posts.POSTS_FETCHED';\nexport const FILTER_CHANGED = 'posts.FILTER_CHANGED';\nexport const POST_SELECTED = 'posts.POST_SELECTED';","// reducers hold the store's state (the initialState object defines it)\n// reducers also handle plain object actions and modify their state (immutably) accordingly\n// this is the only way to change the store's state\n// the other exports in this file are selectors, which is business logic that digests parts of the store's state\n// for easier consumption by views\n\nimport _ from 'lodash';\nimport * as types from './actionTypes';\nimport Immutable from 'seamless-immutable';\n\nconst initialState = Immutable({\n    postsById: undefined,\n    currentFilter: 'all',\n    currentPostId: undefined\n});\n\nexport default function reduce(state = initialState, action = {}) {\n    switch (action.type) {\n        case types.POSTS_FETCHED:\n            return state.merge({\n                postsById: action.postsById\n            });\n        case types.FILTER_CHANGED:\n            return state.merge({\n                currentFilter: action.filter\n            });\n        case types.POST_SELECTED:\n            return state.merge({\n                currentPostId: action.postId\n            });\n        default:\n            return state;\n    }\n}\n\n// selectors\n\nexport function getPosts(state) {\n    const currentFilter = state.posts.currentFilter;\n    const postsById = state.posts.postsById;\n    const postsIdArray = currentFilter === 'all' ?\n        _.keys(postsById) :\n        _.filter(_.keys(postsById), (postId) => postsById[postId].topicUrl === currentFilter);\n    return [postsById, postsIdArray];\n}\n\nexport function getCurrentFilter(state) {\n    return state.posts.currentFilter;\n}\n\nexport function getCurrentPost(state) {\n    return _.get(state.posts.postsById, state.posts.currentPostId);\n}","\nimport _ from 'lodash';\nimport React, { Component } from 'react';\n\nexport default class TopicFilter extends Component {\n\n    render() {\n        return (\n            <div className={this.props.className}>\n                {this.renderFilter('all', 'All')}\n                {_.map(this.props.topics, (topic, topicId) => this.renderFilter(topicId, topic.title))}\n            </div>\n        );\n    }\n\n    renderFilter(id, label) {\n        const className = this.props.selected === id ? 'selected' : undefined;\n        return (\n            <a\n                key={id}\n                href=\"#\"\n                className={className}\n                onClick={() => this.onFilterClick(id)}>\n                {label}\n            </a>\n        );\n    }\n\n    onFilterClick(id) {\n        if (id === this.props.selected) return;\n        this.props.onChanged(id);\n    }\n\n}","import React, { Component } from 'react';\n\nexport default class PostView extends Component {\n\n    render() {\n        if (!this.props.post) return this.renderEmpty();\n        if (this.props.post.body) return this.renderBody();\n        else if (this._isImage(this.props.post.url)) return this.renderImage();\n        else return this.renderUrl();\n    }\n\n    renderEmpty() {\n        return (\n            <div>\n                <h3>Select a post to view</h3>\n            </div>\n        );\n    }\n\n    renderBody() {\n        return (\n            <div dangerouslySetInnerHTML={this._getBodyMarkup(this.props.post.body)} />\n        );\n    }\n\n    renderImage() {\n        return (\n            <img src={this.props.post.url} alt={this.props.post.title} />\n        );\n    }\n\n    renderUrl() {\n        return (\n            <div>\n                <h3>External Link</h3>\n                <a href={this.props.post.url} target=\"_blank\">Open</a>\n            </div>\n        );\n    }\n\n    _getBodyMarkup(body) {\n        return {\n            __html: body.replace(/&#(\\d+);/g, (match, dec) => String.fromCharCode(dec)).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"')\n        }\n    }\n\n    _isImage(url) {\n        if (!url) return false;\n        return (url.endsWith('.jpg') || url.endsWith('.gif') || url.endsWith('.png'));\n    }\n\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './PostsScreen.css';\nimport * as postsActions from '../store/posts/actions';\nimport * as postsSelectors from '../store/posts/reducer';\nimport * as topicsSelectors from '../store/topics/reducer';\nimport ListView from '../components/ListView';\nimport ListRow from '../components/ListRow';\nimport TopicFilter from '../components/TopicFilter';\nimport PostView from '../components/PostView';\n\nclass PostsScreen extends Component {\n\n    componentDidMount() {\n        this.props.dispatch(postsActions.fetchPosts());\n    }\n\n    render() {\n        if (!this.props.rowsById) return this.renderLoading();\n        return (\n            <div className=\"PostsScreen\">\n                <div className=\"LeftPane\">\n                    <TopicFilter\n                        className=\"TopicFilter\"\n                        topics={this.props.topicsByUrl}\n                        selected={this.props.currentFilter}\n                        onChanged={this.onFilterChanged.bind(this)}\n                    />\n                    <ListView\n                        rowsIdArray={this.props.rowsIdArray}\n                        rowsById={this.props.rowsById}\n                        renderRow={this.renderRow.bind(this)} />\n                </div>\n                <div className=\"ContentPane\">\n                    <PostView post={this.props.currentPost} />\n                </div>\n            </div>\n        );\n    }\n\n    renderLoading() {\n        return (\n            <p>Loading...</p>\n        );\n    }\n\n    renderRow(rowId, row) {\n        const selected = this.props.currentPost === row;\n        return (\n            <ListRow\n                rowId={rowId}\n                onClick={this.onRowClick.bind(this)}\n                selected={selected}>\n                {!row.thumbnail ? false :\n                    <img className=\"thumbnail\" src={row.thumbnail} alt='thumbnail' />\n                }\n                <h3>{row.title}</h3>\n            </ListRow>\n        )\n    }\n\n    onFilterChanged(newFilter) {\n        this.props.dispatch(postsActions.changeFilter(newFilter));\n    }\n\n    onRowClick(rowId) {\n        this.props.dispatch(postsActions.selectPost(rowId));\n    }\n\n}\n\n// which props do we want to inject, given the global store state?\nfunction mapStateToProps(state) {\n    const [postsById, postsIdArray] = postsSelectors.getPosts(state);\n    return {\n        rowsById: postsById,\n        rowsIdArray: postsIdArray,\n        topicsByUrl: topicsSelectors.getSelectedTopicsByUrl(state),\n        currentFilter: postsSelectors.getCurrentFilter(state),\n        currentPost: postsSelectors.getCurrentPost(state)\n    };\n}\n\nexport default connect(mapStateToProps)(PostsScreen);","import _ from 'lodash';\nimport * as types from './actionTypes';\nimport redditService from '../../services/reddit';\nimport * as topicsSelectors from '../topics/reducer';\n\nexport function fetchPosts() {\n    return async(dispatch, getState) => {\n        try {\n            const selectedTopicUrls = topicsSelectors.getSelectedTopicUrls(getState());\n            const fetchPromises = _.map(selectedTopicUrls, (topicUrl) => redditService.getPostsFromSubreddit(topicUrl));\n            const topicPosts = await Promise.all(fetchPromises);\n            const postsById = _.keyBy(_.shuffle(_.flatten(topicPosts)), (post) => post.id);\n            dispatch({ type: types.POSTS_FETCHED, postsById });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n}\n\nexport function changeFilter(newFilter) {\n    return({ type: types.FILTER_CHANGED, filter: newFilter });\n}\n\nexport function selectPost(postId) {\n    return({ type: types.POST_SELECTED, postId });\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as topicsSelectors from './store/topics/reducer';\nimport TopicsScreen from './containers/TopicsScreen';\nimport PostsScreen from './containers/PostsScreen';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                {!this.props.isSelectionFinalized ?\n                    <TopicsScreen /> :\n                    <PostsScreen />\n                }\n            </div>\n        );\n    }\n}\n\n// which props do we want to inject, given the global store state?\nfunction mapStateToProps(state) {\n    return {\n        isSelectionFinalized: topicsSelectors.isTopicSelectionFinalized(state)\n    };\n}\n\nexport default connect(mapStateToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport './index.css';\n\nimport * as reducers from './store/reducers';\nconst store = createStore(combineReducers(reducers), applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}